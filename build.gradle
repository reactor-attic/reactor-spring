/*
 * Copyright (c) 2011-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
description = 'Reactor Spring Components'

ext {
	gradleVersion = '2.2.1'
	gradleScriptDir = "${rootProject.projectDir}/gradle"

	// Languages
	groovyVersion = '2.4.4'

	// Logging
	slf4jVersion = '1.7.7'
	logbackVersion = '1.1.2'

	// Libraries
	commonsIoVersion = '2.4'
	jacksonDatabindVersion = '2.4.3'
	jsonPathVersion = '0.9.0'
	kryoVersion = '2.22'
	protobufVersion = '2.5.0'
	reactorVersion = version
	reactorNettyVersion = '0.6.0.BUILD-SNAPSHOT'
	springVersion = '4.1.5.RELEASE'
	snappyVersion = '1.1.0.1'
	openHftChronicleVersion = '2.0.3'
	openHftLangVersion = '6.1.4'

	// Testing
	mockitoVersion = '1.9.5'
	spockVersion = '1.0-groovy-2.4'

	// Code coverage
	jacocoVersion = '0.7.0.201403182114'

	javadocLinks = [
			"https://docs.oracle.com/javase/7/docs/api/",
			"https://docs.oracle.com/javaee/6/api/",
			"https://reactor.github.io/docs/api/",
			"https://fasterxml.github.com/jackson-core/javadoc/2.3.2/",
			"https://docs.spring.io/spring/docs/4.0.x/javadoc-api/"
	] as String[]
}

buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7',
							'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'
	}
}

apply from: "$gradleScriptDir/setup.gradle"

subprojects { subproject ->
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'maven'

	configurations {
		jacoco
	}

	configurations.all {
	  	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		exclude group: "commons-logging"
	}

	group = 'io.projectreactor.spring'
	repositories {
		mavenLocal()
		maven { url 'https://repo.spring.io/libs-snapshot' }
		maven { url 'https://repo.spring.io/libs-milestone' }
		mavenCentral()
	}

	if (project.hasProperty('platformVersion')) {
		apply plugin: 'spring-io'

		repositories {
			maven { url 'https://repo.spring.io/libs-milestone' }
		}

		dependencyManagement {
			springIoTestRuntime {
				imports {
					mavenBom "io.spring.platform:platform-bom:$platformVersion"
				}
			}
		}
	}

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g"]

	sourceSets {
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	jar {
		manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	// dependencies that are common across all java projects
	dependencies {
		// Logging
		compile "org.slf4j:slf4j-api:$slf4jVersion"

		// Testing
		testCompile "org.codehaus.groovy:groovy-all:$groovyVersion",
				"org.spockframework:spock-core:$spockVersion",
				"org.hamcrest:hamcrest-library:1.3",
				"org.spockframework:spock-spring:$spockVersion",
				"org.springframework:spring-test:$springVersion"
		testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion",
				"ch.qos.logback:logback-classic:$logbackVersion"

		// Code coverage
		jacoco "org.jacoco:org.jacoco.agent:$jacocoVersion:runtime"
	}

	test {
		testLogging {
			jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=reactor.spring.*"
			events "failed"
			exceptionFormat "full"
		}
	}
}

project('reactor-spring-core') {
	description = 'Reactor Spring Core Components'
	dependencies {
		// Reactor
		compile "io.projectreactor:reactor-core:$reactorVersion", "io.projectreactor.addons:reactor-bus:$reactorVersion"

		// Spring
		compile "org.springframework:spring-beans:$springVersion",
				"org.springframework:spring-context:$springVersion",
				"org.springframework:spring-core:$springVersion",
				"org.springframework:spring-expression:$springVersion"
	}
}

project('reactor-spring-context') {
	description = 'Reactor Spring Context Components'
	dependencies {
		compile project(':reactor-spring-core')

		// Spring
		compile "org.springframework:spring-context-support:$springVersion"

		// JSON handling
		compile "com.jayway.jsonpath:json-path:$jsonPathVersion"
	}
}

project('reactor-spring-messaging') {
	description = 'Reactor Spring Messaging Components'
	dependencies {
		// Reactor Spring
		compile project(':reactor-spring-context')

		// Spring Messaging
		compile("org.springframework:spring-messaging:$springVersion") {
			exclude group: "io.projectreactor.spring", module: "reactor-net"
		}

		testCompile "com.esotericsoftware.kryo:kryo:$kryoVersion",
				"commons-io:commons-io:$commonsIoVersion"
	}
}

configure(rootProject) {
	description = "Reactor Spring"

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"

		dependsOn {
			subprojects.collect {
				it.tasks.getByName("jar")
			}
		}
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		//options.overview = "src/api/overview.html"
		options.stylesheetFile = file("src/api/stylesheet.css")
		options.links(project.ext.javadocLinks)

		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")

		doFirst {
			classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
		}
	}
}

task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
	group = 'Project Setup'
	gradleVersion = "$gradleVersion"
}
